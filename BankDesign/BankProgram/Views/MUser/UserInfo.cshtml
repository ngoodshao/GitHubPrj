@model LSH.EF.CodeFirst.DLL.Model.M_User

<script>
    function closeW() {
        var dialog = frameElement.dialog; //调用页面的dialog对象(ligerui对象)
        dialog.close();
    }
    function TClose() {
        var succ = "@ViewBag.Succ";
        var msg = "@ViewBag.Msg";
        if (msg != "") {
            if (succ == "1") {
                $.ligerDialog.alert(msg, '提示', "success", function () {
                    //alert(window.parent.document.location);//父页
                    //alert(window.parent.location);//父页
                    //alert(window.location);//当前页
                    window.parent.document.location.reload();
                    //window.parent.document.ligerGrid.loadData();
                    closeW();
                });
            }
            else {
                $.ligerDialog.alert(msg, '提示', "error");
            }
        }
    }
    TClose();

    function itemclick(item) {
        if (item.ActionName == "Close") {
            closeW();
        }
        if (item.ActionName == "Save") {
            $('#form1').submit();
        }
    }
    $(function () {
        $("#toptoolbar").ligerToolBar({
            items: [
                {
                    text: '保存', click: itemclick, icon: 'save', ActionName: 'Save'
                },
                { line: true },
                { text: '关闭', click: itemclick, icon: 'close', ActionName: 'Close' },
            ]
        });
        SetSelected();
    });

    function GetSelected(e) {
        var perssiom = "";
        alert($("#" + e.id));
        var checkPin = $("#" + e.id).parent().parent().children("label").children("input[onclick='GetSelected(this)']");
        checkPin.each(function () {
            if ($(this).is(':checked'))
                perssiom += $(this).attr("value") + ",";
        });
        $("#UserPermission").val(perssiom);
    }

    function SetSelected() {
        var sperssiom = $("#UserPermission").val().split(',');

        var checkPin = $("#checkDel").parent().parent().children("label").children("input[onclick='GetSelected(this)']")

        for (var i = 0; i < sperssiom.length; i++)
        {
            $("#checkDel").parent().parent().children("label").children("input[value='" + sperssiom[i] + "']").attr("checked", "checked")
        }
    }

</script>
<style>
    input, select {
        padding-left: 3px;
        margin-bottom: 5px;
        min-height: 30px;
        width: 86%;
    }
</style>

<div id="toptoolbar"></div>
<br />
<div class="container">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div class="row">
        <div class="col-xs-2 text-right">
            @Html.LabelFor(model => model.UserID, new { @class = " control-label" })
        </div>
        <div class="col-xs-4">
            @Html.EditorFor(model => model.UserID)
            @Html.ValidationMessageFor(model => model.UserID)
        </div>

        <div class="col-xs-2  text-right">
            @Html.LabelFor(model => model.UserPwd, new { @class = "control-label" })
        </div>
        <div class="col-xs-4">
            @Html.PasswordFor(model => model.UserPwd)
            @Html.ValidationMessageFor(model => model.UserPwd)
        </div>
    </div>
    <div class="row">
        <div class="col-xs-2  text-right">
            @Html.LabelFor(model => model.UserName, new { @class = "control-label" })
        </div>
        <div class="col-xs-4">
            @Html.EditorFor(model => model.UserName)
            @Html.ValidationMessageFor(model => model.UserName)
        </div>

        <div class="col-xs-2  text-right">
            @Html.LabelFor(model => model.UserState, new { @class = "control-label" })
        </div>
        <div class="col-xs-4">
            @Html.DropDownListFor(model => model.UserState, new[] {
               new SelectListItem(){ Text="活动", Value="1"},
               new SelectListItem(){ Text="禁用", Value="2"}}, "请选择")
            @Html.ValidationMessageFor(model => model.UserState)
        </div>
    </div>
    <div class="row">

        <div class="col-xs-2  text-right">
            @Html.LabelFor(model => model.UserPermission, new { @class = "control-label" })
        </div>
        <div class="col-xs-4">
            <label>@Html.CheckBox("checkAdd", false, new { onclick = "GetSelected(this)",value="0" }) 添加</label>
            <label>@Html.CheckBox("checkDel", false, new { onclick = "GetSelected(this)", value = "1" }) 删除</label>
            <label>@Html.CheckBox("checkModify", false, new { onclick = "GetSelected(this)", value = "2" }) 修改</label>
            <label>@Html.CheckBox("checkQuery", false, new { onclick = "GetSelected(this)", value = "3" }) 查询</label>
            <label>@Html.CheckBox("checkImport", false, new { onclick = "GetSelected(this)", value = "4" }) 导入</label>
            <label>@Html.CheckBox("checkExport", false, new { onclick = "GetSelected(this)", value = "5" }) 导出</label>
            @Html.HiddenFor(model => model.UserPermission)
            @Html.ValidationMessageFor(model => model.UserPermission)
        </div>

        <div class="col-xs-2 text-right">
            @Html.LabelFor(model => model.Remark, new { @class = "control-label" })
        </div>
        <div class="col-xs-4">
            @Html.TextAreaFor(model => model.Remark)
        </div>
    </div>
</div>
